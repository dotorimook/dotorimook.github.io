{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/components/PostListItem.tsx","webpack:///./src/utils/date.ts","webpack:///./src/components/Utterances.tsx","webpack:///./src/pages/index.tsx"],"names":["SEO","props","lang","meta","keywords","description","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","title","titleTemplate","content","name","property","author","concat","length","join","Frame","styled","article","scale","fontSize","colors","gray","c666","PostListItem","dateTimeFrom","dt","post","excerpt","slug","fields","frontmatter","categories","tags","date","className","to","map","category","key","tag","DateTime","fromFormat","isValid","fromISO","diffNow","days","hours","Math","floor","abs","toFormat","Utterances","React","memo","repo","theme","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","crossOrigin","async","Object","entries","forEach","value","setAttribute","current","appendChild","ref","displayName","FadeLink","h3","rhythm","section","BlogIndex","data","siteTitle","posts","allMarkdownRemark","nodes","location","id"],"mappings":"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","file":"component---src-pages-index-tsx-31581fe97d56891e07fb.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport Helmet from \"react-helmet\"\n\ninterface Meta {\n  name: string\n  content: string\n}\n\ninterface Props {\n  title: string\n  lang?: string\n  meta?: Meta[]\n  keywords?: string[]\n  description?: string\n}\n\nexport const SEO = (props: Props) => {\n  const lang = props.lang || \"en\"\n  const meta = props.meta || []\n  const keywords = props.keywords || []\n  const description = props.description || \"\"\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={props.title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: props.title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: props.title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                content: keywords.join(`, `),\n                name: `keywords`,\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n","import { Link } from 'gatsby';\r\nimport React, { FC } from 'react';\r\nimport styled from 'styled-components';\r\nimport colors from '../consts/styles/colors';\r\nimport { formatDateTime } from '../utils/date';\r\nimport { scale } from '../utils/typography';\r\n\r\n\r\nconst Frame = styled.article`\r\n  position:relative;\r\n  margin-top:${scale(.2).fontSize};\r\n  padding-bottom:${scale(.2).fontSize};\r\n  border-bottom:1px solid ${colors.gray};\r\n  .frame-title {\r\n    margin-bottom:8px;\r\n  }\r\n  .title {\r\n    font-size:1.4rem;\r\n    line-height:1.2em;\r\n  }\r\n  .date {\r\n    /* position:absolute;\r\n    top:0;\r\n    right:0; */\r\n    font-size:.8rem;\r\n    color:${colors.c666};\r\n    text-align:right;\r\n  }\r\n  .category {\r\n    margin-left:10px;\r\n    font-size: 1rem;\r\n    color:${colors.c666};\r\n    &:before {\r\n      content:'/';\r\n      margin-right:8px;\r\n    }\r\n  }\r\n  .ul-tags {\r\n    margin-top:10px;\r\n    color:${colors.c666};\r\n    .li-tag {\r\n      display:inline;\r\n      &:before {\r\n        content:'#';\r\n      }\r\n    }\r\n    .li-tag:not(:first-child) {\r\n      margin-left:6px;\r\n    }\r\n  }\r\n  .frame-description {\r\n    line-height:1.2em;\r\n    margin-bottom:8px;\r\n  }\r\n`;\r\n\r\nexport interface IPost {\r\n  id: string;\r\n  excerpt: string;\r\n  fields: {\r\n    slug:string;\r\n  }\r\n  frontmatter: {\r\n    tilte?:string;\r\n    cateogries: string[];\r\n    tags: string[];\r\n    date?: string;\r\n    description?:string;\r\n  }\r\n}\r\n\r\ninterface IPostListItemProps {\r\n  post: IPost;\r\n}\r\n\r\nconst PostListItem:FC<IPostListItemProps> = ({post}) => {\r\n  const {\r\n    excerpt,\r\n    fields: {\r\n      slug,\r\n    },\r\n    frontmatter: {\r\n      title,\r\n      categories,\r\n      tags,\r\n      date,\r\n      description,\r\n    }\r\n  } = post;\r\n  return (\r\n    <Frame>\r\n          <div className='frame-title'>\r\n            <Link to={slug}>\r\n              <span className='title'>\r\n                {title}\r\n              </span>\r\n            </Link>\r\n            <span className='category'>\r\n              {/* { (categories || []).join(' ') } */}\r\n              {\r\n                (categories || []).map(category => (\r\n                  <Link key={`link-category-${category}`} to={`/category/${category}`}>\r\n                    {category}\r\n                  </Link>\r\n                ))\r\n              }\r\n            </span>\r\n          </div>\r\n        <Link to={slug}>\r\n          <div className='frame-description'>{description || excerpt}</div>\r\n        </Link>\r\n        <ul className='ul-tags'>\r\n          {\r\n            (tags || []).map(tag => (\r\n              <li key={`link-tag-${tag}`} className='li-tag'>\r\n                <Link to={`/tag/${tag}`}>\r\n                  {tag}\r\n                </Link>\r\n              </li>\r\n            ))\r\n          }\r\n        </ul>\r\n        <div className='date'>{formatDateTime(date)}</div>\r\n      </Frame>\r\n  )\r\n}\r\n\r\nexport default PostListItem;","import { DateTime } from \"luxon\";\r\n\r\nexport const formatDateTime = (dateTimeFrom:string):string => {\r\n  // return dateTimeFrom;\r\n  const dt = DateTime.fromFormat(dateTimeFrom, 'yyyy-MM-dd hh:mm:ss').isValid ? DateTime.fromFormat(dateTimeFrom, 'yyyy-MM-dd hh:mm:ss') : DateTime.fromISO(dateTimeFrom);\r\n  if(!dt || !dt.isValid)\r\n    return dateTimeFrom;\r\n  if (dt.diffNow('days').days > -1)\r\n    return `${dt.diffNow().hours}시간 전`;\r\n  if(dt.diffNow('days').days > -7)\r\n    return `${Math.floor(Math.abs(dt.diffNow('days').days))}일 전`;\r\n  return dt.toFormat('yyyy.MM.dd hh:mm:ss');\r\n}","import React, { createRef, useLayoutEffect } from 'react';\r\n\r\nconst src = 'https://utteranc.es/client.js';\r\n\r\nexport interface IUtterancesProps {\r\n  repo: string;\r\n  theme: string;\r\n}\r\n\r\nconst Utterances: React.FC<IUtterancesProps> = React.memo(({ repo, theme }) => {\r\n  const containerRef = createRef<HTMLDivElement>();\r\n\r\n  useLayoutEffect(() => {\r\n    const utterances = document.createElement('script');\r\n\r\n    const attributes = {\r\n      src,\r\n      repo,\r\n      theme,\r\n      'issue-term': 'pathname',\r\n      label: '✨💬 comments ✨',\r\n      crossOrigin: 'anonymous',\r\n      async: 'true',\r\n    };\r\n\r\n    Object.entries(attributes).forEach(([key, value]) => {\r\n      utterances.setAttribute(key, value);\r\n    });\r\n\r\n    containerRef.current!.appendChild(utterances);\r\n  }, [repo]);\r\n\r\n  return <div ref={containerRef} />;\r\n});\r\n\r\nUtterances.displayName = 'Utterances';\r\n\r\nexport default Utterances;","import { graphql, Link, PageRendererProps, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport WindowFrame from \"../../WindowFrame\"\nimport { Bio } from \"../components/bio\"\nimport { Layout } from \"../components/layout\"\nimport { FadeLink } from \"../components/link\"\nimport PostListItem, { IPost } from \"../components/PostListItem\"\nimport { SEO } from \"../components/seo\"\nimport TitleBar from \"../components/TitleBar\"\nimport Utterances from \"../components/Utterances\"\nimport colors from \"../consts/styles/colors\"\nimport { MarkdownRemark } from \"../graphql-types\"\nimport { rhythm } from \"../utils/typography\"\n\nconst StyledLink = styled(FadeLink)`\n  box-shadow: none;\n`\n\nconst Title = styled.h3`\n  margin-bottom: ${rhythm(1 / 4)};\n`\n\nconst FrameBio = styled.section`\n`;\n\n\ntype Props = PageRendererProps;\n\nconst BlogIndex = (props: Props) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        edges {\n          node {\n            excerpt\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              tags\n              categories\n            }\n          }\n        }\n        nodes {\n          excerpt\n          fields {\n            slug\n          }\n          id\n          frontmatter {\n            date\n            title\n            tags\n            categories\n            description\n          }\n        }\n        tags: distinct(field: frontmatter___tags)\n        categories: distinct(field: frontmatter___categories)\n      }\n    }\n`);\n\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.nodes || [];\n  const tags = data.allMarkdownRemark.tags;\n  const categories = data.allMarkdownRemark.categories;\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO\n        title=\"All posts\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n          <section className='frame-posts'>\n            <h2 className='title'>Posts</h2>\n            {posts.map((post: IPost) => (\n              <PostListItem key={`post-item-${post.id}`} post={post} />\n            ))}\n            {/* {posts.map(({ node }: { node: MarkdownRemark }) => {\n              const frontmatter = node!.frontmatter!\n              const fields = node!.fields!\n              const slug = fields.slug!\n              const excerpt = node!.excerpt!\n\n              const title = frontmatter.title || fields.slug.replace(/\\//g, '').replace(/-/g, ' ')\n              return (\n                <article className='article-post' key={slug}>\n                  <Title>\n                    <Link to={slug}>\n                      <h3>{title}</h3>\n                    </Link>\n                  </Title>\n                  {frontmatter.tags}\n                  {frontmatter.categories}\n                  <small>{frontmatter.date}</small>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: frontmatter.description || excerpt,\n                    }}\n                  />\n                </article>\n              )\n            })} */}\n          </section>\n          <Utterances repo='dotorimook/dotorimook.github.io' theme='github-light' />\n        {/* </ContentFrame> */}\n        {/* {posts.map(({ node }: { node: MarkdownRemark }) => {\n          const frontmatter = node!.frontmatter!\n          const fields = node!.fields!\n          const slug = fields.slug!\n          const excerpt = node!.excerpt!\n\n          const title = frontmatter.title || fields.slug\n          return (\n            <div key={slug}>\n              <Title>\n                <Link to={slug}>{title}</Link>\n              </Title>\n              <small>{frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: frontmatter.description || excerpt,\n                }}\n              />\n            </div>\n          )\n        })} */}\n      {/* </WindowFrame> */}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n"],"sourceRoot":""}