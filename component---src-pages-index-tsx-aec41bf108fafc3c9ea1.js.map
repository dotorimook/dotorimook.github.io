{"version":3,"sources":["webpack:///./src/components/PostListItem.tsx","webpack:///./src/utils/date.ts","webpack:///./src/pages/index.tsx"],"names":["Frame","styled","article","scale","fontSize","colors","gray","c666","PostListItem","dateTimeFrom","dt","post","excerpt","slug","fields","frontmatter","title","categories","tags","date","description","className","to","map","category","key","tag","DateTime","fromFormat","isValid","fromISO","diffNow","days","hours","Math","floor","abs","toFormat","FadeLink","h3","rhythm","section","BlogIndex","props","data","useStaticQuery","siteTitle","site","siteMetadata","posts","allMarkdownRemark","nodes","location","keywords","id"],"mappings":"gLAQMA,EAAQC,IAAOC,QAAV,0EAAGD,CAAH,meAEIE,YAAM,IAAIC,SACND,YAAM,IAAIC,SACDC,IAAOC,KAavBD,IAAOE,KAMPF,IAAOE,KAQPF,IAAOE,MAwFJC,IApD6B,SAAC,GAAW,ICzEzBC,EAEvBC,EDuEsCC,EAAU,EAAVA,KAE1CC,EAWED,EAXFC,QAEEC,EASAF,EAVFG,OACED,KAJkD,EAalDF,EAPFI,YACEC,EAPkD,EAOlDA,MACAC,EARkD,EAQlDA,WACAC,EATkD,EASlDA,KACAC,EAVkD,EAUlDA,KACAC,EAXkD,EAWlDA,YAGJ,OACE,kBAACpB,EAAD,KACM,yBAAKqB,UAAU,eACb,kBAAC,OAAD,CAAMC,GAAIT,GACR,0BAAMQ,UAAU,SACbL,IAGL,0BAAMK,UAAU,aAGXJ,GAAc,IAAIM,KAAI,SAAAC,GAAQ,OAC7B,kBAAC,OAAD,CAAMC,IAAG,iBAAmBD,EAAYF,GAAE,aAAeE,GACtDA,QAMb,kBAAC,OAAD,CAAMF,GAAIT,GACR,yBAAKQ,UAAU,qBAAqBD,GAAeR,IAErD,wBAAIS,UAAU,YAETH,GAAQ,IAAIK,KAAI,SAAAG,GAAG,OAClB,wBAAID,IAAG,YAAcC,EAAOL,UAAU,UACpC,kBAAC,OAAD,CAAMC,GAAE,QAAUI,GACfA,QAMX,yBAAKL,UAAU,SCxHQZ,EDwHeU,GCtHtCT,EAAKiB,WAASC,WAAWnB,EAAc,uBAAuBoB,QAAUF,WAASC,WAAWnB,EAAc,uBAAyBkB,WAASG,QAAQrB,KAC/IC,EAAGmB,QAEVnB,EAAGqB,QAAQ,QAAQC,MAAQ,EACnBtB,EAAGqB,UAAUE,MAAvB,OACCvB,EAAGqB,QAAQ,QAAQC,MAAQ,EAClBE,KAAKC,MAAMD,KAAKE,IAAI1B,EAAGqB,QAAQ,QAAQC,OAAjD,MACKtB,EAAG2B,SAAS,uBALV5B,O,kCCNX,oHAcmBR,YAAOqC,KAAV,oEAAGrC,CAAH,sBAIFA,IAAOsC,GAAV,+DAAGtC,CAAH,uBACQuC,YAAO,EAAI,IAGbvC,IAAOwC,QAAV,kEAAGxC,CAAH,MAmJCyC,UA7IG,SAACC,GACjB,IAAMC,EAAOC,yBAAe,aAyCtBC,EAAYF,EAAKG,KAAKC,aAAahC,MACnCiC,EAAQL,EAAKM,kBAAkBC,OAAS,GACjCP,EAAKM,kBAAkBhC,KACjB0B,EAAKM,kBAAkBjC,WAE1C,OACE,kBAAC,IAAD,CAAQmC,SAAUT,EAAMS,SAAUpC,MAAO8B,GACvC,kBAAC,IAAD,CACE9B,MAAM,YACNqC,SAAU,CAAC,OAAD,iCAgCR,6BAAShC,UAAU,eACjB,wBAAIA,UAAU,SAAd,SACC4B,EAAM1B,KAAI,SAACZ,GAAD,OACT,kBAAC,IAAD,CAAcc,IAAG,aAAed,EAAK2C,GAAM3C,KAAMA","file":"component---src-pages-index-tsx-aec41bf108fafc3c9ea1.js","sourcesContent":["import { Link } from 'gatsby';\r\nimport React, { FC } from 'react';\r\nimport styled from 'styled-components';\r\nimport colors from '../consts/styles/colors';\r\nimport { formatDateTime } from '../utils/date';\r\nimport { scale } from '../utils/typography';\r\n\r\n\r\nconst Frame = styled.article`\r\n  position:relative;\r\n  margin-top:${scale(.2).fontSize};\r\n  padding-bottom:${scale(.2).fontSize};\r\n  border-bottom:1px solid ${colors.gray};\r\n  .frame-title {\r\n    margin-bottom:8px;\r\n  }\r\n  .title {\r\n    font-size:1.4rem;\r\n    line-height:1.2em;\r\n  }\r\n  .date {\r\n    /* position:absolute;\r\n    top:0;\r\n    right:0; */\r\n    font-size:.8rem;\r\n    color:${colors.c666};\r\n    text-align:right;\r\n  }\r\n  .category {\r\n    margin-left:10px;\r\n    font-size: 1rem;\r\n    color:${colors.c666};\r\n    &:before {\r\n      content:'/';\r\n      margin-right:8px;\r\n    }\r\n  }\r\n  .ul-tags {\r\n    margin-top:10px;\r\n    color:${colors.c666};\r\n    .li-tag {\r\n      display:inline;\r\n      &:before {\r\n        content:'#';\r\n      }\r\n    }\r\n    .li-tag:not(:first-child) {\r\n      margin-left:6px;\r\n    }\r\n  }\r\n  .frame-description {\r\n    line-height:1.2em;\r\n    margin-bottom:8px;\r\n  }\r\n`;\r\n\r\nexport interface IPost {\r\n  id: string;\r\n  excerpt: string;\r\n  fields: {\r\n    slug:string;\r\n  }\r\n  frontmatter: {\r\n    tilte?:string;\r\n    cateogries: string[];\r\n    tags: string[];\r\n    date?: string;\r\n    description?:string;\r\n  }\r\n}\r\n\r\ninterface IPostListItemProps {\r\n  post: IPost;\r\n}\r\n\r\nconst PostListItem:FC<IPostListItemProps> = ({post}) => {\r\n  const {\r\n    excerpt,\r\n    fields: {\r\n      slug,\r\n    },\r\n    frontmatter: {\r\n      title,\r\n      categories,\r\n      tags,\r\n      date,\r\n      description,\r\n    }\r\n  } = post;\r\n  return (\r\n    <Frame>\r\n          <div className='frame-title'>\r\n            <Link to={slug}>\r\n              <span className='title'>\r\n                {title}\r\n              </span>\r\n            </Link>\r\n            <span className='category'>\r\n              {/* { (categories || []).join(' ') } */}\r\n              {\r\n                (categories || []).map(category => (\r\n                  <Link key={`link-category-${category}`} to={`/category/${category}`}>\r\n                    {category}\r\n                  </Link>\r\n                ))\r\n              }\r\n            </span>\r\n          </div>\r\n        <Link to={slug}>\r\n          <div className='frame-description'>{description || excerpt}</div>\r\n        </Link>\r\n        <ul className='ul-tags'>\r\n          {\r\n            (tags || []).map(tag => (\r\n              <li key={`link-tag-${tag}`} className='li-tag'>\r\n                <Link to={`/tag/${tag}`}>\r\n                  {tag}\r\n                </Link>\r\n              </li>\r\n            ))\r\n          }\r\n        </ul>\r\n        <div className='date'>{formatDateTime(date)}</div>\r\n      </Frame>\r\n  )\r\n}\r\n\r\nexport default PostListItem;","import { DateTime } from \"luxon\";\r\n\r\nexport const formatDateTime = (dateTimeFrom:string):string => {\r\n  // return dateTimeFrom;\r\n  const dt = DateTime.fromFormat(dateTimeFrom, 'yyyy-MM-dd hh:mm:ss').isValid ? DateTime.fromFormat(dateTimeFrom, 'yyyy-MM-dd hh:mm:ss') : DateTime.fromISO(dateTimeFrom);\r\n  if(!dt || !dt.isValid)\r\n    return dateTimeFrom;\r\n  if (dt.diffNow('days').days > -1)\r\n    return `${dt.diffNow().hours}시간 전`;\r\n  if(dt.diffNow('days').days > -7)\r\n    return `${Math.floor(Math.abs(dt.diffNow('days').days))}일 전`;\r\n  return dt.toFormat('yyyy.MM.dd hh:mm:ss');\r\n}","import { graphql, Link, PageRendererProps, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport styled from \"styled-components\"\nimport WindowFrame from \"../../WindowFrame\"\nimport { Bio } from \"../components/bio\"\nimport { Layout } from \"../components/layout\"\nimport { FadeLink } from \"../components/link\"\nimport PostListItem, { IPost } from \"../components/PostListItem\"\nimport { SEO } from \"../components/seo\"\nimport TitleBar from \"../components/TitleBar\"\nimport colors from \"../consts/styles/colors\"\nimport { MarkdownRemark } from \"../graphql-types\"\nimport { rhythm } from \"../utils/typography\"\n\nconst StyledLink = styled(FadeLink)`\n  box-shadow: none;\n`\n\nconst Title = styled.h3`\n  margin-bottom: ${rhythm(1 / 4)};\n`\n\nconst FrameBio = styled.section`\n`;\n\n\ntype Props = PageRendererProps;\n\nconst BlogIndex = (props: Props) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n      allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n        edges {\n          node {\n            excerpt\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              tags\n              categories\n            }\n          }\n        }\n        nodes {\n          excerpt\n          fields {\n            slug\n          }\n          id\n          frontmatter {\n            date\n            title\n            tags\n            categories\n            description\n          }\n        }\n        tags: distinct(field: frontmatter___tags)\n        categories: distinct(field: frontmatter___categories)\n      }\n    }\n`);\n\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.nodes || [];\n  const tags = data.allMarkdownRemark.tags;\n  const categories = data.allMarkdownRemark.categories;\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO\n        title=\"All posts\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n          {/* <section className='frame-main-banner'>\n            <img className='img-main-banner' src='https://source.unsplash.com/480x320/?vaporwave'/>\n          </section>\n          <section className='frame-bio'>\n            <h1>Dotorimook's blog</h1>\n          </section>\n          <section className='frame-categories frame-inner'>\n            <h1 className='title'>Categories</h1>\n            <ul>\n              {\n                tags.map(tag => (\n                  <li key={`link-tag-${tag}`}>\n                    <Link to={`/tag/${tag}`}>{tag}</Link>\n                  </li>\n                ))\n              }\n            </ul>\n          </section>\n          <section className='frame-tags frame-inner'>\n            <h2 className='title'>Tags</h2>\n            <ul>\n              {\n                categories.map(category => (\n                  <li key={`link-category-${category}`}>\n                    <Link to={`/category/${category}`}>{category}</Link>\n                  </li>\n                ))\n              }\n            </ul>\n          </section> */}\n          <section className='frame-posts'>\n            <h2 className='title'>Posts</h2>\n            {posts.map((post: IPost) => (\n              <PostListItem key={`post-item-${post.id}`} post={post} />\n            ))}\n            {/* {posts.map(({ node }: { node: MarkdownRemark }) => {\n              const frontmatter = node!.frontmatter!\n              const fields = node!.fields!\n              const slug = fields.slug!\n              const excerpt = node!.excerpt!\n\n              const title = frontmatter.title || fields.slug.replace(/\\//g, '').replace(/-/g, ' ')\n              return (\n                <article className='article-post' key={slug}>\n                  <Title>\n                    <Link to={slug}>\n                      <h3>{title}</h3>\n                    </Link>\n                  </Title>\n                  {frontmatter.tags}\n                  {frontmatter.categories}\n                  <small>{frontmatter.date}</small>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: frontmatter.description || excerpt,\n                    }}\n                  />\n                </article>\n              )\n            })} */}\n          </section>\n        {/* </ContentFrame> */}\n        {/* {posts.map(({ node }: { node: MarkdownRemark }) => {\n          const frontmatter = node!.frontmatter!\n          const fields = node!.fields!\n          const slug = fields.slug!\n          const excerpt = node!.excerpt!\n\n          const title = frontmatter.title || fields.slug\n          return (\n            <div key={slug}>\n              <Title>\n                <Link to={slug}>{title}</Link>\n              </Title>\n              <small>{frontmatter.date}</small>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: frontmatter.description || excerpt,\n                }}\n              />\n            </div>\n          )\n        })} */}\n      {/* </WindowFrame> */}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n"],"sourceRoot":""}