{"version":3,"sources":["webpack:///./src/components/PostListItem.tsx","webpack:///./src/utils/date.ts","webpack:///./src/templates/categories.tsx"],"names":["Frame","styled","article","scale","fontSize","colors","gray","c666","PostListItem","dateTimeFrom","dt","post","excerpt","slug","fields","frontmatter","title","categories","tags","date","description","className","to","map","category","key","tag","DateTime","fromFormat","isValid","fromISO","diffNow","days","hours","Math","floor","abs","toFormat","Categories","pageContext","data","allMarkdownRemark","posts","nodes","totalCount","node","id"],"mappings":"gLAQMA,EAAQC,IAAOC,QAAV,0EAAGD,CAAH,meAEIE,YAAM,IAAIC,SACND,YAAM,IAAIC,SACDC,IAAOC,KAavBD,IAAOE,KAMPF,IAAOE,KAQPF,IAAOE,MAwFJC,IApD6B,SAAC,GAAW,ICzEzBC,EAEvBC,EDuEsCC,EAAU,EAAVA,KAE1CC,EAWED,EAXFC,QAEEC,EASAF,EAVFG,OACED,KAJkD,EAalDF,EAPFI,YACEC,EAPkD,EAOlDA,MACAC,EARkD,EAQlDA,WACAC,EATkD,EASlDA,KACAC,EAVkD,EAUlDA,KACAC,EAXkD,EAWlDA,YAGJ,OACE,kBAACpB,EAAD,KACM,yBAAKqB,UAAU,eACb,kBAAC,OAAD,CAAMC,GAAIT,GACR,0BAAMQ,UAAU,SACbL,IAGL,0BAAMK,UAAU,aAGXJ,GAAc,IAAIM,KAAI,SAAAC,GAAQ,OAC7B,kBAAC,OAAD,CAAMC,IAAG,iBAAmBD,EAAYF,GAAE,aAAeE,GACtDA,QAMb,kBAAC,OAAD,CAAMF,GAAIT,GACR,yBAAKQ,UAAU,qBAAqBD,GAAeR,IAErD,wBAAIS,UAAU,YAETH,GAAQ,IAAIK,KAAI,SAAAG,GAAG,OAClB,wBAAID,IAAG,YAAcC,EAAOL,UAAU,UACpC,kBAAC,OAAD,CAAMC,GAAE,QAAUI,GACfA,QAMX,yBAAKL,UAAU,SCxHQZ,EDwHeU,GCtHtCT,EAAKiB,WAASC,WAAWnB,EAAc,uBAAuBoB,QAAUF,WAASC,WAAWnB,EAAc,uBAAyBkB,WAASG,QAAQrB,KAC/IC,EAAGmB,QAEVnB,EAAGqB,QAAQ,QAAQC,MAAQ,EACnBtB,EAAGqB,UAAUE,MAAvB,OACCvB,EAAGqB,QAAQ,QAAQC,MAAQ,EAClBE,KAAKC,MAAMD,KAAKE,IAAI1B,EAAGqB,QAAQ,QAAQC,OAAjD,MACKtB,EAAG2B,SAAS,uBALV5B,O,kCCNX,wDAiEe6B,UAtDkB,SAAC,GAAuC,IAAtBd,EAAsB,EAArCe,YAAef,SAAsB,IAAVgB,KACjBC,kBAA9BC,EADyD,EAChEC,MADgE,IAClDC,kBADkD,MACrC,EADqC,EAEvE,OACE,kBAAC,IAAD,KACE,qCACQpB,EADR,YAC2BoB,EAD3B,KAGIF,EAAMnB,KAAI,SAACsB,GAAD,OACR,kBAAC,IAAD,CAAcpB,IAAG,QAAUoB,EAAKC,GAAMnC,KAAMkC","file":"component---src-templates-categories-tsx-afa6e6c3f26ee51f4b06.js","sourcesContent":["import { Link } from 'gatsby';\r\nimport React, { FC } from 'react';\r\nimport styled from 'styled-components';\r\nimport colors from '../consts/styles/colors';\r\nimport { formatDateTime } from '../utils/date';\r\nimport { scale } from '../utils/typography';\r\n\r\n\r\nconst Frame = styled.article`\r\n  position:relative;\r\n  margin-top:${scale(.2).fontSize};\r\n  padding-bottom:${scale(.2).fontSize};\r\n  border-bottom:1px solid ${colors.gray};\r\n  .frame-title {\r\n    margin-bottom:8px;\r\n  }\r\n  .title {\r\n    font-size:1.4rem;\r\n    line-height:1.2em;\r\n  }\r\n  .date {\r\n    /* position:absolute;\r\n    top:0;\r\n    right:0; */\r\n    font-size:.8rem;\r\n    color:${colors.c666};\r\n    text-align:right;\r\n  }\r\n  .category {\r\n    margin-left:10px;\r\n    font-size: 1rem;\r\n    color:${colors.c666};\r\n    &:before {\r\n      content:'/';\r\n      margin-right:8px;\r\n    }\r\n  }\r\n  .ul-tags {\r\n    margin-top:10px;\r\n    color:${colors.c666};\r\n    .li-tag {\r\n      display:inline;\r\n      &:before {\r\n        content:'#';\r\n      }\r\n    }\r\n    .li-tag:not(:first-child) {\r\n      margin-left:6px;\r\n    }\r\n  }\r\n  .frame-description {\r\n    line-height:1.2em;\r\n    margin-bottom:8px;\r\n  }\r\n`;\r\n\r\nexport interface IPost {\r\n  id: string;\r\n  excerpt: string;\r\n  fields: {\r\n    slug:string;\r\n  }\r\n  frontmatter: {\r\n    tilte?:string;\r\n    cateogries: string[];\r\n    tags: string[];\r\n    date?: string;\r\n    description?:string;\r\n  }\r\n}\r\n\r\ninterface IPostListItemProps {\r\n  post: IPost;\r\n}\r\n\r\nconst PostListItem:FC<IPostListItemProps> = ({post}) => {\r\n  const {\r\n    excerpt,\r\n    fields: {\r\n      slug,\r\n    },\r\n    frontmatter: {\r\n      title,\r\n      categories,\r\n      tags,\r\n      date,\r\n      description,\r\n    }\r\n  } = post;\r\n  return (\r\n    <Frame>\r\n          <div className='frame-title'>\r\n            <Link to={slug}>\r\n              <span className='title'>\r\n                {title}\r\n              </span>\r\n            </Link>\r\n            <span className='category'>\r\n              {/* { (categories || []).join(' ') } */}\r\n              {\r\n                (categories || []).map(category => (\r\n                  <Link key={`link-category-${category}`} to={`/category/${category}`}>\r\n                    {category}\r\n                  </Link>\r\n                ))\r\n              }\r\n            </span>\r\n          </div>\r\n        <Link to={slug}>\r\n          <div className='frame-description'>{description || excerpt}</div>\r\n        </Link>\r\n        <ul className='ul-tags'>\r\n          {\r\n            (tags || []).map(tag => (\r\n              <li key={`link-tag-${tag}`} className='li-tag'>\r\n                <Link to={`/tag/${tag}`}>\r\n                  {tag}\r\n                </Link>\r\n              </li>\r\n            ))\r\n          }\r\n        </ul>\r\n        <div className='date'>{formatDateTime(date)}</div>\r\n      </Frame>\r\n  )\r\n}\r\n\r\nexport default PostListItem;","import { DateTime } from \"luxon\";\r\n\r\nexport const formatDateTime = (dateTimeFrom:string):string => {\r\n  // return dateTimeFrom;\r\n  const dt = DateTime.fromFormat(dateTimeFrom, 'yyyy-MM-dd hh:mm:ss').isValid ? DateTime.fromFormat(dateTimeFrom, 'yyyy-MM-dd hh:mm:ss') : DateTime.fromISO(dateTimeFrom);\r\n  if(!dt || !dt.isValid)\r\n    return dateTimeFrom;\r\n  if (dt.diffNow('days').days > -1)\r\n    return `${dt.diffNow().hours}시간 전`;\r\n  if(dt.diffNow('days').days > -7)\r\n    return `${Math.floor(Math.abs(dt.diffNow('days').days))}일 전`;\r\n  return dt.toFormat('yyyy.MM.dd hh:mm:ss');\r\n}","import React, { FC } from 'react'\r\nimport { Layout } from '../components/layout';\r\nimport PostListItem from '../components/PostListItem';\r\nimport IComponentProps from '../interfaces/IComponentProps';\r\n\r\ninterface ITagProps extends IComponentProps {\r\n  pageContext: {\r\n    tag: string;\r\n  }\r\n}\r\n\r\nconst Categories:FC<ITagProps> = ({ pageContext: { category }, data}) => {\r\n  const {nodes: posts, totalCount = 0} = data.allMarkdownRemark;\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        카테고리 {category}에 대한 포스트 {totalCount} 건\r\n        {\r\n          posts.map((node:IPost)=>(\r\n            <PostListItem key={`post-${node.id}`} post={node} />\r\n          ))\r\n        }\r\n      </div>\r\n    </Layout>\r\n  )\r\n};\r\n\r\nexport const query = graphql`\r\n  query($category: String!) {\r\n    allMarkdownRemark(filter: {frontmatter: {categories: {eq: $category}}}, sort: { fields: [frontmatter___date], order: DESC }) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          id\r\n          frontmatter {\r\n            date\r\n            title\r\n            tags\r\n            categories\r\n            description\r\n          }\r\n        }\r\n      }\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        id\r\n        frontmatter {\r\n          date\r\n          title\r\n          tags\r\n          categories\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default Categories;"],"sourceRoot":""}