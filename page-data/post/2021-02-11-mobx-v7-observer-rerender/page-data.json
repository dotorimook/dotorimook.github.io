{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2021-02-11-mobx-v7-observer-rerender/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"ad34d74a-7273-56a5-96f3-3674aee4414a","excerpt":"최신버전 mobx mobx-react 패키지 설치 후 observer 리렌더링이 되지 않는다?! 😭 오랜만에 새로운 프로젝트를 세팅하느라 React 프로젝트를 만들고, state 관리로는 MobX…","html":"<h1>최신버전 mobx mobx-react 패키지 설치 후 observer 리렌더링이 되지 않는다?! 😭</h1>\n<p>오랜만에 새로운 프로젝트를 세팅하느라 React 프로젝트를 만들고, state 관리로는 <em>MobX</em>로 결정. <code class=\"language-text\">mobx</code>롸 <code class=\"language-text\">mobx-react</code> 패키지를 설치한다. 테스트로 <code class=\"language-text\">observable</code> 변수를 만들고 <code class=\"language-text\">observer</code> 컴포넌트에서 상태 변화를 확인해본다. 그런데 갑자기 업데이트가 되질 않는다. 도대체 무슨 일인가?! 이것저것 해봐도 한 것은 정확히 똑같은데?!!</p>\n<h2>Enabling decorators</h2>\n<p><a href=\"https://mobx.js.org/enabling-decorators.html\">공식 문서</a>에 소개된 바로는, <em>MobX</em> 버전 6이전까지는 ES.next 데코레이터를 이용해서 <code class=\"language-text\">observable</code>, <code class=\"language-text\">computed</code>, <code class=\"language-text\">action</code>으로 만들기로 되어 있었다. 하지만 데코레이터는 현재 ES 표준이 아니고, 표준화의 과정이 너무 오랜 기간이 소요된다. 그리고 표준이 이전에 데코레이터와는 다른 방식으로 구현되고 있는 것으로 보이고 있다고 한다. MobX 버전 6부터는 <code class=\"language-text\">makeObservable</code>과 <code class=\"language-text\">makeAutoObservable</code>을 대신 사용하도록 한다고 한다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">import { makeObservable, observable, computed, action } from &quot;mobx&quot;\n\nclass Todo {\n    id = Math.random()\n    @observable title = &quot;&quot;\n    @observable finished = false\n\n    constructor() {\n        makeObservable(this)\n    }\n\n    @action\n    toggle() {\n        this.finished = !finished\n    }\n}\n\nclass TodoList {\n    @observable todos = []\n\n    @computed\n    get unfinishedTodoCount() {\n        return this.todos.filter(todo =&gt; !todo.finished).length\n    }\n\n    constructor() {\n        makeObservable(this)\n    }\n}</code>\n        </deckgo-highlight-code>\n<h2>mobx와 mobx-react의 올바른 버전 선택은?</h2>\n<p>사실 셋업하는 시점에는 최신 버전의 <code class=\"language-text\">mobx</code>, <code class=\"language-text\">mobx-react</code>를 설치해서 사용하지만, <a href=\"https://github.com/mobxjs/mobx-react\">mobx-react 문서</a>에 따르면 <code class=\"language-text\">mobx-react</code>는 유지보수가 되고 있는 법전이 2가지 존재한다고한다. <code class=\"language-text\">mobx</code>와 <code class=\"language-text\">mobx-react</code>는 다음 버전 궁함이 있는 것으로 보인다:</p>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">mobx-react</code> 버전</th>\n<th><code class=\"language-text\">mobx</code> 버전</th>\n<th>React 버전</th>\n<th>hook 기반 컴포넌트 지원 여부</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v7</td>\n<td>6.*</td>\n<td>16.8+</td>\n<td>지원</td>\n</tr>\n<tr>\n<td>v6</td>\n<td>4._ / 5._</td>\n<td>16.8+</td>\n<td>지원</td>\n</tr>\n<tr>\n<td>v5</td>\n<td>4._ / 5._</td>\n<td>0.13+</td>\n<td>미지원 (<code class=\"language-text\">&lt;Observer&gt;</code> 로 감싸서 사용)</td>\n</tr>\n</tbody>\n</table>\n<p>혹시나 MobX가 잘 동작하지 않는다면, 버전을 확인해봐야 할 것 같다.</p>","frontmatter":{"title":"최신버전 mobx mobx-react에서 observer re-render 안될 때","date":"February 11, 2021","description":null}}},"pageContext":{"next":{"fields":{"slug":"/post/2021-02-12-adsense/"},"frontmatter":{"title":"마참내!! 나에게도 드디어!! 애드센스! - 애드센스 도전기"}},"previous":{"fields":{"slug":"/post/2021-02-10-typescript-eslint-warning/"},"frontmatter":{"title":"eslint 'React' was used before it was defined  @typescript-eslint/no-use-before-define 대처법"}},"slug":"/post/2021-02-11-mobx-v7-observer-rerender/"}},"staticQueryHashes":["2880150720","63159454"]}