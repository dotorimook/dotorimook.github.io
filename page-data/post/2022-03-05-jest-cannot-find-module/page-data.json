{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2022-03-05-jest-cannot-find-module/","result":{"data":{"site":{"siteMetadata":{"title":"dotorimook's blog","author":"Dotorimook"}},"markdownRemark":{"id":"445ebd39-87f3-5ad1-be7f-ebe521aedf83","excerpt":"TDD 생활중에 마주한 뜻밖의 상황에 대한 원인과 해결 방법을 공유하고자 한다. jest Cannot find module ‘module’ 에러 (경로나 모듈명들 중요하지 않은 내용 일부는 각색했다.) 최근 작업하는 프로젝트에서 모듈을 하나 추가한 후 Jest…","html":"<p>TDD 생활중에 마주한 뜻밖의 상황에 대한 원인과 해결 방법을 공유하고자 한다.</p>\n<h2>jest Cannot find module ‘module’ 에러</h2>\n<deckgo-highlight-code   >\n          <code slot=\"code\">● Test suite failed to run\n\n    Cannot find module &#39;module&#39; from &#39;src/components/Component.tsx&#39;\n\n    Require stack:\n      src/components/Component.tsx\n      src/__test__/components/Component.spec.tsx\n\n       9 | import React from &#39;react&#39;\n    &gt; 10 | import { Method } from &#39;module&#39;\n         | ^\n      11 |\n\n      at Resolver.resolveModule (node_modules/jest-resolve/build/index.js:306:11)\n      at Object.&lt;anonymous&gt; (src/components/Component.tsx:10:1)</code>\n        </deckgo-highlight-code>\n<p>(경로나 모듈명들 중요하지 않은 내용 일부는 각색했다.)</p>\n<p>최근 작업하는 프로젝트에서 모듈을 하나 추가한 후 Jest로 테스트 코드를 작성했는데, 테스트 중에  <code class=\"language-text\">Cannot find module</code> 이라는 에러 메시지를 만나게 됐다. 재밌는 점은 브라우저로 실행해보았을 때엔 잘 된다는 점이었다. jest로 테스트만 잘 작동하지 않았다.</p>\n<h2>원인과 해결 방법</h2>\n<p>원인은 -당연하겠지만- 새롭게 추가한 모듈에 있었다. 해당 모듈을 jest에서 부를 수 없는 이유는 해당 모듈의 package.json에 <code class=\"language-text\">main</code> 프로퍼티가 정의되어있지 않아서였다. 실제로 해당 모듈의 package.json을 살펴보니 <code class=\"language-text\">main</code>이 없었다.</p>\n<p>해결방법은 당연하게도 <code class=\"language-text\">main</code>의 경로를 입력해주면 된다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\n  ...\n  &quot;module&quot;: &quot;dist/index.js&quot;,\n  &quot;main&quot;: &quot;dist/index.js&quot;,\n  ...\n}</code>\n        </deckgo-highlight-code>\n<p>깔끔하게 해결된다.✨😎✨</p>\n<h3>package.json의 <code class=\"language-text\">main</code> 프로퍼티의 역할</h3>\n<p><code class=\"language-text\">main</code>은 모듈의 시작점, entrypoint가 되는 지점을 알려준다.</p>\n<blockquote>\n<p>“main” 항목은 당신의 프로그램의 시작점이 되는 모듈의 ID입니다.</p>\n<p>즉, ‘foo’ 라는 패키지가 있다면, 이 패키지를 사용자가 설치한 뒤, require(“foo”) 를 실행했을 때 “main” 으로 지정한 모듈의 exports 객체가 반환됩니다.</p>\n</blockquote>\n<p><a href=\"https://webclub.tistory.com/472\">package.json 간단히 알아보기</a>의 내용을 보면 <code class=\"language-text\">main</code>에 대해 위와 같이 설명하고 있다.</p>\n<p>위 내용을 살펴보면 jest가 해당 모듈을 import하려고 할 때에 메인 진입 지점을 찾지 못하기 때문으로 추측해볼 수 있다.</p>\n<h2>Reference</h2>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/53466859/jest-cannot-find-module-from-node-modules\">https://stackoverflow.com/questions/53466859/jest-cannot-find-module-from-node-modules</a></li>\n<li><a href=\"https://programmingsummaries.tistory.com/385\">https://programmingsummaries.tistory.com/385</a></li>\n</ol>","frontmatter":{"title":"[짧은 팁] jest Cannot find module 'module' from 'src/components/Component.tsx' 에러 해결","date":"March 05, 2022","description":null}}},"pageContext":{"next":null,"previous":{"fields":{"slug":"/post/2022-02-06-diary/"},"frontmatter":{"title":"개츠비 블로그 - 계륵일세.."}},"slug":"/post/2022-03-05-jest-cannot-find-module/"}},"staticQueryHashes":["2880150720","63159454"]}