{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2020-12-02-package-lock-yarn-lock-conversion/","result":{"data":{"site":{"siteMetadata":{"title":"dotorimook's blog","author":"Dotorimook"}},"markdownRemark":{"id":"6f0bdce7-9ae1-54ab-9f66-536c19ca9b0f","excerpt":"Yarn or NPM…","html":"<h1>Yarn or NPM?</h1>\n<p>웹 개발시 <code class=\"language-text\">yarn</code>이나 <code class=\"language-text\">npm</code>을 패키지 매니저로 사용한다. <code class=\"language-text\">yarn</code>과 <code class=\"language-text\">npm</code>은 거의 동일하다. <code class=\"language-text\">npm</code>이 더 기본값이라고 생각할 수 있다. 나는 <code class=\"language-text\">yarn</code>을 선호한다. 내가 처음 <code class=\"language-text\">yarn</code>을 접하던 시기에 <code class=\"language-text\">yarn</code>이 <code class=\"language-text\">npm</code>보다 미세하게 더 빨랐고, 이전에는 패키지를 설치할 때에 <code class=\"language-text\">npm install --save</code>라고 <code class=\"language-text\">--save</code> 옵션을 쓰지 않으면 추가한 패키지가 <code class=\"language-text\">package.json</code>의 의존성에 작성되지 않았다. 그래서 항상 패키지를 설치할 때에 <code class=\"language-text\">--save</code>라는 옵션을 사용해야하는 번거로움이 존재했다. 그래서 <code class=\"language-text\">Yarn</code>을 선호했다.</p>\n<h1><code class=\"language-text\">yarn.lock</code> or <code class=\"language-text\">package-lock.json</code>?</h1>\n<p><code class=\"language-text\">yarn</code>을 이용하면 <code class=\"language-text\">yarn.lock</code> 파일이 생성되고 <code class=\"language-text\">npm install</code>을 하게되면 <code class=\"language-text\">pacakge-lock.json</code>파일이 생성되는 것을 확인할 수 있다. 파일 내용을 보면 알겠지만 설치된 의존성 패키지들의 버전이 기록되어있다. 프로젝트가 개발되는 시점에 어떤 의존성이 설치되어있는가 확인할 수 있는 자료가 된다. <code class=\"language-text\">package.json</code>파일의 의존성 정보에는 각 패키지의 <strong>특정 버전을 명시</strong>해서 작성할 수도 있지만, <em>일정 버전 이상</em>이라든지 조금 더 유연하게 작성할 수 있기 때문에, 이 <strong>lock</strong>파일 들이 <em>패키지를 설치하는 시점에 어떤 버전을 설치했는지 확인할 수 있는 기준</em>이 된다. 또한, 개발 하던 시점의 패키지 의존성 상태를 복원할 수 있는 자료가 된다. 즉, <strong>의존성 패키지들의 버전의 일관성</strong>을 유지하기 위해 필요한 파일이라는 뜻이다.</p>\n<p>이 lock 파일들을 <code class=\"language-text\">gitignore</code>에 추가해야하는지 말아야하는지에 대한 이야기가 있곤 하는데 바로 위 이유 때문에 이 lock파일들은 무조건 유지해야하고 <strong>gitignore처리하면 안된다</strong>.</p>\n<h1><code class=\"language-text\">yarn.lock</code> <code class=\"language-text\">package-lock.json</code> 간 변환</h1>\n<p>그런데 나는 yarn 개발 환경을 써왔는데, 정작 원격 빌드 환경은 npm을 쓰는 경우에는, 또는 그 반대의 경우에는 어떻게 해야하는가? 좀 황당한 질문이지만 이런 종류가 왕왕있다. 그래서 찾아봤다. 그랬더니 <em><a href=\"https://github.com/imsnif/synp\">synp</a></em> 라는 도구가 있었다. <em>synp</em>는 <code class=\"language-text\">yarn.lock</code> 파일을 <code class=\"language-text\">package-lock.json</code>파일로 변환하거나 그 반대로 변환해주는 도구이다. <code class=\"language-text\">npm install -g</code> 또는 <code class=\"language-text\">yarn global add</code>로 글로벌로 설치해서 사용할 수 있다.</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">yarn global add synp</code>\n        </deckgo-highlight-code>\n<p>변환은 다음과 같이 커맨드를 입력하여 변환 가능하다:</p>\n<deckgo-highlight-code   >\n          <code slot=\"code\">synp --source-file yarn.lock            # will create package-lock.json\nsynp --source-file package-lock.json    # will create yarn.lock</code>\n        </deckgo-highlight-code>\n<p>그럼 이제 <code class=\"language-text\">package-lock.json</code> <code class=\"language-text\">yarn.lock</code> 고민 끝 ㅎㅎㅎ</p>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/50093627/how-to-convert-package-lock-json-to-yarn-lock\">stackoverflow</a></li>\n<li><a href=\"https://github.com/imsnif/synp\">synp</a></li>\n</ul>","frontmatter":{"title":"yarn.lock package-lock.json 간 변환","date":"December 02, 2020","description":null}}},"pageContext":{"next":{"fields":{"slug":"/post/2020-12-20-docker-pm2/"},"frontmatter":{"title":"docker container에서 pm2가 시작하자마자 종료될 때"}},"previous":{"fields":{"slug":"/post/2020-11-21-nginx-cookie-override/"},"frontmatter":{"title":"[nginx] nginx.conf 설정으로 프록시 서버 쿠키 설정 추가하기"}},"slug":"/post/2020-12-02-package-lock-yarn-lock-conversion/"}},"staticQueryHashes":["2880150720","63159454"]}