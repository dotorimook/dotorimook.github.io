{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2020-10-08-swagger-ui-express/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"8feeef5b-31f5-5372-bd35-d53fd473ec4c","excerpt":"Express 프로젝트에 Swagger를 달아보자. Swager? Swagger는 RESTful 웹 서비스에서 설계, 구축, 문서화 등을 도와주는 오픈소스 프레임워크라고 볼 수 있다.\nSpring 프로젝트에서 적용된 사례를 많이 접했는데, node.js도 지원하고 있었다. Swagger…","html":"<h1>Express 프로젝트에 Swagger를 달아보자.</h1>\n<h2>Swager?</h2>\n<p><strong>Swagger</strong>는 RESTful 웹 서비스에서 설계, 구축, 문서화 등을 도와주는 오픈소스 프레임워크라고 볼 수 있다.\nSpring 프로젝트에서 적용된 사례를 많이 접했는데, node.js도 지원하고 있었다.</p>\n<h2>Swagger Tools</h2>\n<p>Swagger는 다음과 같은 것들이 있다.</p>\n<ul>\n<li>\n<p><strong><a href=\"https://swagger.io/tools/swagger-editor/\">Swagger Editor</a></strong></p>\n<p><strong>Swagger Editor</strong>는 RESTful API를 Swagger 스펙에 맞게 설계, 정의, 문서화할 수 있는 오픈소스 에디터이다.</p>\n</li>\n<li>\n<p><strong><a href=\"https://swagger.io/tools/swagger-codegen/\">Swagger Codegen</a></strong></p>\n<p><strong>Swagger Codegen</strong>은 OpenAPI 스펙을 기반으로 API 클라이언트 라이브러리(SDK generation), server stubs, 문서화 등을 자동으로 해준다.</p>\n</li>\n<li>\n<p><strong><a href=\"https://swagger.io/tools/swagger-ui/\">Swagger UI</a></strong></p>\n<p><strong>Swagger UI</strong>는 API 스펙들을 가시적으로 볼 수 있고, 실제 API를 테스트해볼 수 있게 해준다. API에 </p>\n</li>\n<li>\n<p><strong><a href=\"https://swagger.io/tools/swagger-inspector/\">Swagger Inspector</a></strong> </p>\n<p>자동 생성된 OpenAPI 문서를 테스트 할 수 있는 툴이다.</p>\n</li>\n</ul>\n<p>현업에서 일반적으로 <strong>Swagger</strong>라고 하면 <strong>swager-ui</strong>를 많이 지칭하는 것 같다. <strong>swagger-ui</strong>는 백엔드 - 프론트 개발자 간 소통하는 문서로 많이 사용되고 있는데,</p>\n<ul>\n<li>\n<p>프론트 작업자 입장에서는  API 스펙을 볼 수 있고, 테스트도 해볼 수 있기 때문에</p>\n<ul>\n<li>백엔드 작업자를 찾아가서 물어보지 않을 수 있고,</li>\n<li>백엔드 프로젝트를 들춰서 VO 소스코드를 보지 않아도 작업을 할 수 있는 장점이 있다.</li>\n</ul>\n</li>\n<li>\n<p>백엔드 개발자 입장에서는 <strong>swagger-ui</strong> 자체가 문서가 되기 때문에</p>\n<ul>\n<li>별도의 문서가 필요하지 않다는 점,</li>\n<li>프로젝트 소스와 연동되어있기 때문에 <em>가장 신선한</em> 문서라고 볼 수 있다는 장점이 있다.</li>\n</ul>\n</li>\n</ul>\n<p>실제로 Spring 개발자들은 <strong>swagger-ui</strong>를 많이 도입해서 사용하는 사례들을 자주 보았다. 쓰는 프로젝트와 안쓰는 프로젝트의 차이? 말모말모.. 없으면 너무 불편한 정도다.</p>\n<p>그렇다면 node.js에는 어떻게 적용할 수 있을까?</p>\n<h2>express 프로젝트에 <code class=\"language-text\">swagger-ui</code>를 적용하기</h2>\n<p>express로 개발된 node.js 프로젝트에 <code class=\"language-text\">swagger-ui</code>를 적용해보자.</p>\n<h3><code class=\"language-text\">swagger-ui-express</code> 설치</h3>\n<p>프로젝트에 <code class=\"language-text\">swagger-ui-express</code>를 설치한다.</p>\n<p><code class=\"language-text\">swagger-ui-express</code>는 swagger-ui를 사용할 수 있게 하는 express 미들웨어이다.</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ yarn add swagger-ui-express</code>\n        </deckgo-highlight-code>\n<h3><code class=\"language-text\">swagger.json</code> 생성</h3>\n<p><code class=\"language-text\">swagger.json</code>파일을 프로젝트 루트에 생성한다.</p>\n<p>이 JSON 파일에 OpenAPI 정의를 작성한다.</p>\n<p>swagger open api 스펙은 다음링크에서 확인 가능: <a href=\"https://swagger.io/docs/specification/basic-structure/\">https://swagger.io/docs/specification/basic-structure/</a></p>\n<ul>\n<li>\n<p>swagger 기본 구조</p>\n<ul>\n<li>\n<p><code class=\"language-text\">info</code></p>\n<ul>\n<li>API의 정보들을 정의: <code class=\"language-text\">title</code>, <code class=\"language-text\">description</code>(optional), <code class=\"language-text\">version</code>, …</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Paths</code></p>\n<ul>\n<li>각 endpoint path를 나타냄</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Parameters</code></p>\n<ul>\n<li>URL에 포함된 파라미터나 Query String들을 정의함.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Request Body</code></p>\n<ul>\n<li><code class=\"language-text\">requestBody</code>로 body content와 media type을 정의할 수 있음.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Responses</code></p>\n<ul>\n<li>가능한 status code와 response body <code class=\"language-text\">schema</code>를 정의할 수있음.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>아래와 같이 <code class=\"language-text\">swagger,json</code>파일을 작성한다. 참고로 아래 <code class=\"language-text\">version</code>은 OpenAPI 스펙의 버전이다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\n  &quot;swagger&quot;: &quot;2.0&quot;,\n  &quot;info&quot;: {\n    &quot;version&quot;: &quot;1.0.0&quot;, //version of the OpenAPI Specification\n    &quot;title&quot;: &quot;My User Project CRUD&quot;,\n    &quot;description&quot;: &quot;My User Project Application API&quot;,\n    &quot;license&quot;: {\n      &quot;name&quot;: &quot;MIT&quot;,\n      &quot;url&quot;: &quot;https://opensource.org/licenses/MIT&quot;\n    }\n  },\n  &quot;host&quot;: &quot;localhost:8000&quot;,\n  &quot;basePath&quot;: &quot;/&quot;,\n  &quot;tags&quot;: [\n    {\n      &quot;name&quot;: &quot;Users&quot;,\n      &quot;description&quot;: &quot;API for users in the system&quot;\n    }\n  ],\n  &quot;schemes&quot;: [\n    &quot;http&quot;\n  ],\n  &quot;consumes&quot;: [\n    &quot;application/json&quot;\n  ],\n  &quot;produces&quot;: [\n    &quot;application/json&quot;\n  ]\n}</code>\n        </deckgo-highlight-code>\n<h3><code class=\"language-text\">swagger-ui-express</code> 연동하기</h3>\n<p>아래와같이 <code class=\"language-text\">swagger-ui-express</code>와 작성한 <code class=\"language-text\">swagger.json</code>을 import 하여</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">const swaggerUi = require(‘swagger-ui-express’),\nswaggerDocument = require(‘./swagger.json’);</code>\n        </deckgo-highlight-code>\n<p><code class=\"language-text\">app.listen()</code>앞에 아래 코드를 추가한다.</p>\n<deckgo-highlight-code language=\"jsx\"  >\n          <code slot=\"code\">app.use(&#39;/api-docs&#39;, swaggerUi.serve, swaggerUi.setup(swaggerDocument));</code>\n        </deckgo-highlight-code>\n<p>이렇게하면 호스트에서 <code class=\"language-text\">{{host}}/api-docs</code>를 통해서 Swagger 문서를 볼 수있는 것을 확인할 수 있다.</p>\n<h3>API 정의 완성하기</h3>\n<p>이제 <code class=\"language-text\">swagger.json</code>을 사용하는 API로 완성하면 된다. <code class=\"language-text\">paths</code> 필드에 api 스펙을 추가해나가면 된다. <code class=\"language-text\">definitions</code>에는 API에서 사용하게되는 object 형태를 제공 할 수 있다. </p>\n<p><code class=\"language-text\">endpoint</code> 명과 method type이 key가 되고, 각 값들을 정의할 수 있다. <code class=\"language-text\">parameters</code>로 파라미터의 타이</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">..\n&quot;paths&quot;: {\n    &quot;/users&quot;: {\n      &quot;get&quot;: {\n        &quot;tags&quot;: [\n          &quot;Users&quot;\n        ],\n        &quot;summary&quot;: &quot;Get all users in system&quot;,\n        &quot;responses&quot;: {\n          &quot;200&quot;: {\n            &quot;description&quot;: &quot;OK&quot;,\n            &quot;schema&quot;: {\n              &quot;$ref&quot;: &quot;#/definitions/Users&quot;\n            }\n          }\n        }\n      }\n    },\n    &quot;/addUser&quot;: {\n      &quot;post&quot;: {\n        &quot;tags&quot;: [\n          &quot;Users&quot;\n        ],\n        &quot;description&quot;: &quot;Create new user in system&quot;,\n        &quot;parameters&quot;: [\n          {\n            &quot;name&quot;: &quot;user&quot;,\n            &quot;in&quot;: &quot;body&quot;,\n            &quot;description&quot;: &quot;User that we want to create&quot;,\n            &quot;schema&quot;: {\n              &quot;$ref&quot;: &quot;#/definitions/User&quot;\n            }\n          }\n        ],\n        &quot;produces&quot;: [\n          &quot;application/json&quot;\n        ],\n        &quot;responses&quot;: {\n          &quot;200&quot;: {\n            &quot;description&quot;: &quot;New user is created&quot;,\n            &quot;schema&quot;: {\n            &quot;$ref&quot;: &quot;#/definitions/User&quot;\n            }\n          }\n        }\n      }\n    },\n    &quot;/user/{id}&quot;: {\n      &quot;put&quot;: {\n        &quot;summary&quot;: &quot;Update user with given ID&quot;,\n        &quot;tags&quot;: [\n          &quot;Users&quot;\n        ],\n        &quot;parameters&quot;: [\n          {\n            &quot;name&quot;: &quot;id&quot;,\n            &quot;in&quot;: &quot;path&quot;,\n            &quot;rquired&quot;: true,\n            &quot;description&quot;: &quot;ID of user that we want to find&quot;,\n            &quot;type&quot;: &quot;integer&quot;\n          },\n          {\n            &quot;name&quot;: &quot;user&quot;,\n            &quot;in&quot;: &quot;body&quot;,\n            &quot;description&quot;: &quot;User with new values of properties&quot;,\n            &quot;schema&quot;: {\n              &quot;$ref&quot;: &quot;#/definitions/User&quot;\n            }\n          }\n        ],\n        &quot;responses&quot;: {\n          &quot;200&quot;: {\n            &quot;description&quot;: &quot;User is updated&quot;,\n            &quot;schema&quot;: {\n              &quot;$ref&quot;: &quot;#/definitions/User&quot;\n            }\n          }\n        }\n      }\n    }\n  },\n  &quot;definitions&quot;: {\n    &quot;User&quot;: {\n      &quot;required&quot;: [\n        &quot;name&quot;,\n        &quot;_id&quot;,\n        &quot;companies&quot;\n      ],\n      &quot;properties&quot;: {\n        &quot;_id&quot;:{\n          &quot;type&quot;: &quot;integer&quot;,\n          &quot;uniqueItems&quot;: true\n        },\n        &quot;isPublic&quot;: {\n          &quot;type&quot;: &quot;boolean&quot;\n        },\n        &quot;name&quot;: {\n          &quot;types&quot;: &quot;string&quot;\n        },\n        &quot;books&quot;: {\n          &quot;type&quot;: &quot;array&quot;,\n          &quot;items&quot;: {\n            &quot;type&quot;: &quot;object&quot;,\n            &quot;properties&quot;: {\n              &quot;name&quot;: {\n                &quot;type&quot;: &quot;string&quot;\n              },\n              &quot;amount&quot;: {\n                &quot;type&quot;: &quot;number&quot;\n              }\n            }\n          }\n        },\n        &quot;companies&quot;: {\n          &quot;type&quot;: &quot;array&quot;,\n          &quot;items&quot;: {\n            &quot;type&quot;: &quot;string&quot;\n          }\n        }\n      }\n    },\n    &quot;Users&quot;: {\n      &quot;type&quot; :&quot;array&quot;,\n      &quot;$ref&quot;: &quot;#/definitions/User&quot;\n    }\n  }\n...</code>\n        </deckgo-highlight-code>\n<p>대략적으로 형태들이 파악이 가능하다.</p>\n<p>그런데… 이 모든 API에 대해서 <code class=\"language-text\">swagger.json</code>을 작성해야하나?!!\n이럴거면 단순 문서를 위해서라면 JSDoc, TSDoc, docz 등을 차라리 사용했겠죠..</p>\n<p>그럼 다음 포스트에서 좀 더 쉽게 작성할 수 잇는 방법을 소개한다!</p>\n<h3>Reference</h3>\n<p>참고가 된 사이트</p>\n<ul>\n<li><a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md\">Open API Spec</a></li>\n<li><a href=\"https://medium.com/@kirtikau/how-to-add-swagger-ui-to-existing-node-js-and-express-js-project-2c8bad9364ce\">how-to-add-swagger-ui-to-existing-node-js-and-express-js-project</a></li>\n<li><a href=\"https://levelup.gitconnected.com/the-simplest-way-to-add-swagger-to-a-node-js-project-c2a4aa895a3c\">the-simplest-way-to-add-swagger-to-a-node-js-project</a></li>\n</ul>","frontmatter":{"title":"node.js express 서버에 Swagger 끼얹기","date":"October 08, 2020","description":null}}},"pageContext":{"next":{"fields":{"slug":"/post/2020-10-09-mds_store/"},"frontmatter":{"title":"Mac OS mds_store 리소스 점유율 문제 해결하기"}},"previous":{"fields":{"slug":"/post/2020-10-06-mysql-field-function/"},"frontmatter":{"title":"MySQL Field를 이용해서 원하는 순서로 정렬하기"}},"slug":"/post/2020-10-08-swagger-ui-express/"}},"staticQueryHashes":["2880150720","63159454"]}