{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/post/2020-10-24-mongoose-connect/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"f07eb508-9d3f-5721-8c1b-312bc49a95d8","excerpt":"mongoose 시작하기 MySQL과 같은 전통적인 SQL 데이터베이스가 여전히 많이 쓰이고 있고, 나도 꽤 익숙한지라..\nmongoDB는 자주 접할 기회기 없었는데, javascript와의 찰떡 궁합이라는 이야기에 욕심내서 공부겸.. 사용해보려고 한다. mongoose…","html":"<h1>mongoose 시작하기</h1>\n<p>MySQL과 같은 전통적인 SQL 데이터베이스가 여전히 많이 쓰이고 있고, 나도 꽤 익숙한지라..\n<em>mongoDB</em>는 자주 접할 기회기 없었는데, <em>javascript</em>와의 찰떡 궁합이라는 이야기에 욕심내서 공부겸.. 사용해보려고 한다.</p>\n<h2>mongoose?</h2>\n<p><strong>mongoose</strong>는 <em>mongoDB</em>의 <em>ODM</em> 라이브러리이다. <em>ODM</em>은 <em>Object-Document Mapper</em>로, <em>ORM(Object-Relation Mapper)</em>과 유사한 개념이라고 보면 된다.\n<em>ODM</em>을 사용하면 <em>ORM</em>을 사용할 때와 같은 장점을 가지고 있다고 볼 수 있겠다.</p>\n<p><em>mongoose</em>는 <em>mongoDB</em>를 사용한다고 하면 거의 대부분 <em>mongoose</em>를 이용한다고 보면 될 정도로 유명하고 많이 쓰이는 라이브러리 같다.\n일반적으로는 <em>mongoDB</em>를 그대로 사용한다기보다 <em>mongoose</em>를 이용해서 사용한다.\n특히, SQL에 익숙하다면 <em>mongoDB</em>를 사용하게되면 쿼리를 작성하는 것이 달라서 낯설고 어렵게만 다가오는데, <em>mongoose</em>를 사용하면 한결 편해진다.</p>\n<h2>mongoose의 설치.</h2>\n<p><code class=\"language-text\">mongoose</code>는 <code class=\"language-text\">yarn</code>으로 설치하면 된다.</p>\n<deckgo-highlight-code language=\"shell\"  >\n          <code slot=\"code\">$yarn add mongoose</code>\n        </deckgo-highlight-code>\n<p>typescript 프로젝트의 경우 아래와 같이 정의를 <em>devDependency</em>로 설치해주자.</p>\n<deckgo-highlight-code language=\"shell\"  >\n          <code slot=\"code\">$yarn add @types/mongoose --dev</code>\n        </deckgo-highlight-code>\n<h2>mongoDB의 연결</h2>\n<p>이 포스트의 주제다. 그럼 mongoose를 이용해서 어떻게 DB에 연결하는지 알아보자.\n<em>mongoDB</em>의 연결은 <code class=\"language-text\">mongoose.connect</code>로 한다.\n스펙은 아래와 같다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">mongoose.connect(&#39;mongodb://username:password@host:port/database?options...&#39;, {useNewUrlParser: true});</code>\n        </deckgo-highlight-code>\n<p>연결에 관한 내용은 <code class=\"language-text\">mongoose.connection</code>이 제공한다. <code class=\"language-text\">mongoose.connection</code>을 이용하면 DB 연결에 대한 콜백이나 에러 핸들링 등도 가능하다.</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">import mongoose from &#39;mongoose&#39;;\n\nmongoose.connect(&#39;mongodb://localhost:27017&#39;, {useNewUrlParser: true});\nconst { connection } = mongoose;\n\nconsole.log(&#39;connecting db...&#39;);\nconnection.on(&#39;error&#39;, console.error.bind(console, &#39;connection error:&#39;));\nconnection.once(&#39;open&#39;, () =&gt; {\n  console.log(&#39;connected to mongo db&#39;);\n});</code>\n        </deckgo-highlight-code>\n<p>이렇게 해주면 성공적으로 연결되었을 때, <code class=\"language-text\">connected to mongo db</code>라는 메시지를 콘솔에서 확인할 수 있다.</p>","frontmatter":{"title":"[mongoose] mongoose 연결하기","date":"October 24, 2020","description":null}}},"pageContext":{"next":{"fields":{"slug":"/post/2020-10-08-mongoose-soft-delete-plugin/"},"frontmatter":{"title":"[mongoose] mongoose paranoid (soft delete) 적용하기 (feat. plugin)"}},"previous":{"fields":{"slug":"/post/2020-10-22-jira-smart-commit/"},"frontmatter":{"title":"Jira 스마트 커밋(Smart Commit) 사용하기"}},"slug":"/post/2020-10-24-mongoose-connect/"}},"staticQueryHashes":["2880150720","63159454"]}