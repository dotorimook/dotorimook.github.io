import { Component, Prop, Watch, Element, Method, Event, Listen, State, h, Host } from '@stencil/core';
import Prism from 'prismjs';
import { debounce, injectCSS } from "@deckdeckgo/utils";
import { loadTheme } from '../../utils/themes-loader.utils';
import { CarbonThemeStyle } from '../styles/deckdeckgo-highlight-code-theme';
import { DeckdeckgoHighlightCodeCarbonTheme } from '../../declarations/deckdeckgo-highlight-code-carbon-theme';
import { DeckdeckgoHighlightCodeTerminal } from '../../declarations/deckdeckgo-highlight-code-terminal';
import { deckdeckgoHighlightCodeLanguages } from '../../declarations/deckdeckgo-highlight-code-languages';
export class DeckdeckgoHighlightCode {
  constructor() {
    this.anchor = '// DeckDeckGo';
    this.anchorZoom = '// DeckDeckGoZoom';
    this.hideAnchor = true;
    this.language = 'javascript';
    this.lineNumbers = false;
    this.terminal = DeckdeckgoHighlightCodeTerminal.CARBON;
    this.editable = false;
    this.theme = DeckdeckgoHighlightCodeCarbonTheme.DRACULA;
    this.anchorOffsetTop = 0;
    this.fetchOrParseAfterUpdate = false;
    this.loaded = false;
    this.catchTab = async ($event) => {
      if ($event && $event.key === 'Tab') {
        $event.preventDefault();
        document.execCommand('insertHTML', false, '&#009');
      }
    };
    this.debounceUpdateSlot = debounce(async () => {
      await this.copyCodeToSlot();
    }, 500);
  }
  async componentWillLoad() {
    await this.loadGoogleFonts();
    await this.loadTheme();
  }
  async componentDidLoad() {
    const languageWasLoaded = await this.languageDidLoad();
    await this.loadLanguages();
    if (languageWasLoaded) {
      await this.fetchOrParse();
    }
  }
  async componentDidUpdate() {
    if (this.fetchOrParseAfterUpdate) {
      await this.fetchOrParse();
      this.fetchOrParseAfterUpdate = false;
    }
  }
  async loadTheme() {
    if (this.terminal !== DeckdeckgoHighlightCodeTerminal.CARBON || !this.theme) {
      this.themeStyle = undefined;
      return;
    }
    const { theme } = await loadTheme(this.theme);
    this.themeStyle = theme;
  }
  async languageLoaded($event) {
    if (!$event || !$event.detail) {
      return;
    }
    if (this.languagesToLoad) {
      this.languagesToLoad = this.languagesToLoad.filter((lang) => lang !== $event.detail);
    }
    if (this.language && !this.loaded && (this.languagesToLoad === undefined || this.languagesToLoad.length <= 0)) {
      await this.fetchOrParse();
      this.loaded = true;
    }
  }
  async fetchOrParse() {
    if (!this.language || !deckdeckgoHighlightCodeLanguages[this.language]) {
      return;
    }
    if (this.src) {
      await this.fetchCode();
    }
    else {
      await this.parseSlottedCode();
    }
  }
  languageDidLoad() {
    return new Promise((resolve) => {
      if (!document || !this.language || this.language === '') {
        resolve(false);
        return;
      }
      const scripts = document.querySelector("[deckdeckgo-prism-loaded='" + this.language + "']");
      if (scripts) {
        resolve(true);
      }
      else {
        resolve(false);
      }
    });
  }
  async onLanguage() {
    await this.loadLanguages(true);
  }
  async loadLanguages(reload = false) {
    this.loaded = false;
    if (!this.language || !deckdeckgoHighlightCodeLanguages[this.language]) {
      console.error(`Language ${this.language} is not supported`);
      return;
    }
    await this.initLanguagesToLoad();
    await this.loadLanguagesRequire();
    await this.loadScript(this.language, reload);
  }
  async initLanguagesToLoad() {
    if (!this.language) {
      return;
    }
    const definition = deckdeckgoHighlightCodeLanguages[this.language];
    this.languagesToLoad = definition.require && definition.require.length > 0 ? [this.language, ...definition.require] : [this.language];
  }
  async loadLanguagesRequire() {
    const promises = [];
    const definition = deckdeckgoHighlightCodeLanguages[this.language];
    if (definition.require) {
      promises.push(...definition.require.map((extraScript) => this.loadScript(extraScript, false, true)));
    }
    if (promises.length <= 0) {
      return;
    }
    await Promise.all(promises);
  }
  loadScript(lang, reload = false, requireScript = false) {
    return new Promise(async (resolve) => {
      if (!document || !lang || lang === '') {
        resolve();
        return;
      }
      // No need to load javascript, it is there
      if (lang === 'javascript') {
        this.prismLanguageLoaded.emit('javascript');
        resolve();
        return;
      }
      const scripts = document.querySelector("[deckdeckgo-prism='" + lang + "']");
      if (scripts) {
        if (reload) {
          this.prismLanguageLoaded.emit(lang);
        }
        resolve();
        return;
      }
      const script = document.createElement('script');
      script.onload = async () => {
        script.setAttribute('deckdeckgo-prism-loaded', lang);
        this.prismLanguageLoaded.emit(lang);
      };
      script.onerror = async () => {
        if (script.parentElement) {
          script.parentElement.removeChild(script);
        }
        // if the language definition doesn't exist or if unpkg is down, display code anyway
        this.prismLanguageLoaded.emit(lang);
      };
      const definition = deckdeckgoHighlightCodeLanguages[this.language];
      let language = !requireScript && definition.main ? definition.main : lang;
      script.src = 'https://unpkg.com/prismjs@latest/components/prism-' + language + '.js';
      script.setAttribute('deckdeckgo-prism', language);
      script.defer = true;
      document.head.appendChild(script);
      script.addEventListener('load', () => resolve(), { once: true });
    });
  }
  async onLineNumbersChange() {
    await this.fetchOrParse();
  }
  async onCarbonChange() {
    this.fetchOrParseAfterUpdate = true;
    await this.loadGoogleFonts();
  }
  async loadGoogleFonts() {
    if (this.terminal === DeckdeckgoHighlightCodeTerminal.UBUNTU) {
      await injectCSS('google-fonts-ubuntu', 'https://fonts.googleapis.com/css?family=Ubuntu|Ubuntu+Mono&display=swap');
    }
  }
  load() {
    return new Promise(async (resolve) => {
      if (!this.language || this.language === '') {
        resolve();
        return;
      }
      if (this.language === 'javascript') {
        await this.fetchOrParse();
        resolve();
        return;
      }
      if (document.querySelector("[deckdeckgo-prism-loaded='" + this.language + "']")) {
        await this.fetchOrParse();
      }
      else {
        await this.loadLanguages();
      }
      resolve();
    });
  }
  parseSlottedCode() {
    const code = this.el.querySelector("[slot='code']");
    if (code) {
      return this.parseCode(code.innerText ? code.innerText.trim() : code.innerText);
    }
    else {
      return new Promise((resolve) => {
        resolve();
      });
    }
  }
  async fetchCode() {
    if (!this.src) {
      return;
    }
    let fetchedCode;
    try {
      const response = await fetch(this.src);
      fetchedCode = await response.text();
      await this.parseCode(fetchedCode);
    }
    catch (e) {
      // Prism might not be able to parse the code for the selected language
      const container = this.el.shadowRoot.querySelector('div.deckgo-highlight-code-container');
      if (container && fetchedCode) {
        container.children[0].innerHTML = fetchedCode;
      }
    }
  }
  parseCode(code) {
    return new Promise(async (resolve, reject) => {
      const container = this.el.shadowRoot.querySelector('div.deckgo-highlight-code-container');
      if (!code || code === undefined || code === '') {
        resolve();
        return;
      }
      if (container) {
        try {
          // clear the container first
          container.children[0].innerHTML = '';
          // split the code on linebreaks
          const regEx = RegExp(/\n(?!$)/g); //
          const match = code.split(regEx);
          match.forEach((m, idx, array) => {
            // On last element
            if (idx === array.length - 1) {
              this.attachHighlightObserver(container);
            }
            let div = document.createElement('div');
            if (this.lineNumbers) {
              div.classList.add('deckgo-highlight-code-line-number');
            }
            const highlight = Prism.highlight(m, Prism.languages[this.language], this.language);
            // If empty, use \u200B as zero width text spacer
            div.innerHTML = highlight && highlight !== '' ? highlight : '\u200B';
            container.children[0].appendChild(div);
          });
          await this.addAnchors();
          resolve();
        }
        catch (err) {
          reject(err);
        }
      }
    });
  }
  attachHighlightObserver(container) {
    if (window && 'ResizeObserver' in window) {
      // @ts-ignore
      const observer = new ResizeObserver(async (_entries) => {
        await this.addHighlight();
        observer.disconnect();
      });
      observer.observe(container);
    }
    else {
      // Back in my days...
      setTimeout(async () => {
        await this.addHighlight();
      }, 100);
    }
  }
  addAnchors() {
    return new Promise((resolve) => {
      const elements = this.el.shadowRoot.querySelectorAll('span.comment');
      if (elements) {
        const elementsArray = Array.from(elements);
        const anchors = elementsArray.filter((element) => {
          return this.hasLineAnchor(element.innerHTML);
        });
        if (anchors) {
          anchors.forEach((anchor) => {
            anchor.classList.add('deckgo-highlight-code-anchor');
            if (this.hideAnchor) {
              anchor.classList.add('deckgo-highlight-code-anchor-hidden');
            }
          });
        }
      }
      resolve();
    });
  }
  hasLineAnchor(line) {
    return line && this.anchor && line.indexOf('@Prop') === -1 && line.split(' ').join('').indexOf(this.anchor.split(' ').join('')) > -1;
  }
  addHighlight() {
    return new Promise(async (resolve) => {
      if (this.highlightLines && this.highlightLines.length > 0) {
        const rows = await this.findRowsToHighlight();
        if (rows && rows.length > 0) {
          const containerCode = this.el.shadowRoot.querySelector('code');
          if (containerCode && containerCode.hasChildNodes()) {
            const elements = Array.prototype.slice.call(containerCode.childNodes);
            let rowIndex = 0;
            let lastOffsetTop = -1;
            let offsetHeight = -1;
            elements.forEach((element) => {
              let editElement;
              // We need to convert text entries to an element in order to be able to style it
              if (element.nodeName === '#text') {
                const span = document.createElement('span');
                if (element.previousElementSibling) {
                  element.previousElementSibling.insertAdjacentElement('afterend', span);
                }
                else {
                  element.parentNode.prepend(span);
                }
                span.appendChild(element);
                editElement = span;
              }
              else {
                editElement = element;
              }
              // We try to find the row index with the offset of the element
              rowIndex = editElement.offsetTop > lastOffsetTop ? rowIndex + 1 : rowIndex;
              lastOffsetTop = editElement.offsetTop;
              // For some reason, some converted text element are displayed on two lines, that's why we should consider the 2nd one as index
              offsetHeight = offsetHeight === -1 || offsetHeight > editElement.offsetHeight ? editElement.offsetHeight : offsetHeight;
              const rowsIndexToCompare = editElement.offsetHeight > offsetHeight ? rowIndex + 1 : rowIndex;
              if (rows.indexOf(rowsIndexToCompare) > -1) {
                editElement.classList.add('deckgo-highlight-code-line');
              }
            });
          }
        }
      }
      resolve();
    });
  }
  findRowsToHighlight() {
    return new Promise((resolve) => {
      let results = [];
      const rows = this.highlightLines.split(' ');
      if (rows && rows.length > 0) {
        rows.forEach((row) => {
          const index = row.split(',');
          if (index && index.length >= 1) {
            const start = parseInt(index[0], 0);
            const end = parseInt(index[1], 0);
            for (let i = start; i <= end; i++) {
              results.push(i);
            }
          }
        });
      }
      resolve(results);
    });
  }
  findNextAnchor(enter) {
    return new Promise(async (resolve) => {
      const elements = this.el.shadowRoot.querySelectorAll('span.deckgo-highlight-code-anchor');
      if (elements) {
        const elementsArray = enter ? Array.from(elements) : Array.from(elements).reverse();
        const anchor = elementsArray.find((element) => {
          return enter ? element.offsetTop > this.anchorOffsetTop : element.offsetTop < this.anchorOffsetTop;
        });
        if (anchor) {
          this.anchorOffsetTop = anchor.offsetTop;
          resolve({
            offsetTop: anchor.offsetTop,
            hasLineZoom: this.hasLineZoom(anchor.textContent),
          });
        }
        else if (!enter) {
          const elementCode = this.el.shadowRoot.querySelector('code');
          if (elementCode && elementCode.firstElementChild) {
            this.anchorOffsetTop = 0;
            resolve({
              offsetTop: 0,
              hasLineZoom: false,
            });
          }
          else {
            resolve(null);
          }
        }
        else {
          resolve(null);
        }
      }
      else {
        resolve(null);
      }
    });
  }
  zoomCode(zoom) {
    return new Promise((resolve) => {
      const container = this.el.shadowRoot.querySelector('div.deckgo-highlight-code-container');
      if (container) {
        container.style.setProperty('--deckgo-highlight-code-zoom', zoom ? '1.3' : '1');
      }
      resolve();
    });
  }
  hasLineZoom(line) {
    return line && this.anchorZoom && line.indexOf('@Prop') === -1 && line.split(' ').join('').indexOf(this.anchorZoom.split(' ').join('')) > -1;
  }
  async applyCode() {
    if (!this.editable) {
      return;
    }
    await this.copyCodeToSlot();
    await this.parseSlottedCode();
    this.codeDidChange.emit(this.el);
  }
  ;
  inputCode() {
    if (!this.editable) {
      return;
    }
    this.debounceUpdateSlot();
  }
  async copyCodeToSlot() {
    var _a, _b;
    const code = this.el.querySelector("[slot='code']");
    if (code) {
      code.innerHTML = (_b = (_a = this.refCode) === null || _a === void 0 ? void 0 : _a.innerText) === null || _b === void 0 ? void 0 : _b.replace(/(?:\n\n)/g, '\n').replace(/\u200B/g, '');
    }
  }
  edit() {
    var _a;
    if (!this.editable) {
      return;
    }
    (_a = this.refCode) === null || _a === void 0 ? void 0 : _a.focus();
  }
  render() {
    const hostClass = {
      'deckgo-highlight-code-carbon': this.terminal === DeckdeckgoHighlightCodeTerminal.CARBON,
      'deckgo-highlight-code-ubuntu': this.terminal === DeckdeckgoHighlightCodeTerminal.UBUNTU,
    };
    if (this.terminal === DeckdeckgoHighlightCodeTerminal.CARBON) {
      hostClass[`deckgo-highlight-code-theme-${this.theme}`] = true;
    }
    return (h(Host, { class: hostClass, onClick: () => this.edit() },
      this.renderCarbon(),
      this.renderUbuntu(),
      h("div", { class: "deckgo-highlight-code-container" },
        h("code", { contentEditable: this.editable, onBlur: async () => await this.applyCode(), onInput: () => this.inputCode(), onKeyDown: ($event) => this.catchTab($event), ref: (el) => (this.refCode = el) }),
        h("slot", { name: "code" }))));
  }
  renderCarbon() {
    if (this.terminal !== DeckdeckgoHighlightCodeTerminal.CARBON) {
      return undefined;
    }
    return [
      h(CarbonThemeStyle, { style: this.themeStyle }),
      h("div", { class: "carbon" },
        this.renderCarbonCircle('red'),
        this.renderCarbonCircle('yellow'),
        this.renderCarbonCircle('green')),
    ];
  }
  renderCarbonCircle(color) {
    return h("div", { class: color });
  }
  renderUbuntu() {
    if (this.terminal !== DeckdeckgoHighlightCodeTerminal.UBUNTU) {
      return undefined;
    }
    return (h("div", { class: "ubuntu" },
      this.renderUbuntuCircle('close'),
      this.renderUbuntuCircle('minimize'),
      this.renderUbuntuCircle('maximize'),
      h("p", null,
        h("slot", { name: "user" }))));
  }
  renderUbuntuCircle(mode) {
    const symbol = mode === 'close' ? '&#10005;' : mode === 'minimize' ? '&#9472;' : '&#9723;';
    return (h("div", { class: mode },
      h("span", { innerHTML: symbol })));
  }
  static get is() { return "deckgo-highlight-code"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["deckdeckgo-highlight-code.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["deckdeckgo-highlight-code.css"]
  }; }
  static get properties() { return {
    "src": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "src",
      "reflect": false
    },
    "anchor": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "anchor",
      "reflect": false,
      "defaultValue": "'// DeckDeckGo'"
    },
    "anchorZoom": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "anchor-zoom",
      "reflect": false,
      "defaultValue": "'// DeckDeckGoZoom'"
    },
    "hideAnchor": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "hide-anchor",
      "reflect": false,
      "defaultValue": "true"
    },
    "language": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "language",
      "reflect": true,
      "defaultValue": "'javascript'"
    },
    "highlightLines": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "highlight-lines",
      "reflect": true
    },
    "lineNumbers": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "line-numbers",
      "reflect": true,
      "defaultValue": "false"
    },
    "terminal": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DeckdeckgoHighlightCodeTerminal",
        "resolved": "DeckdeckgoHighlightCodeTerminal.CARBON | DeckdeckgoHighlightCodeTerminal.NONE | DeckdeckgoHighlightCodeTerminal.UBUNTU",
        "references": {
          "DeckdeckgoHighlightCodeTerminal": {
            "location": "import",
            "path": "../../declarations/deckdeckgo-highlight-code-terminal"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "terminal",
      "reflect": true,
      "defaultValue": "DeckdeckgoHighlightCodeTerminal.CARBON"
    },
    "editable": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "editable",
      "reflect": false,
      "defaultValue": "false"
    },
    "theme": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "DeckdeckgoHighlightCodeCarbonTheme",
        "resolved": "DeckdeckgoHighlightCodeCarbonTheme",
        "references": {
          "DeckdeckgoHighlightCodeCarbonTheme": {
            "location": "import",
            "path": "../../declarations/deckdeckgo-highlight-code-carbon-theme"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "theme",
      "reflect": true,
      "defaultValue": "DeckdeckgoHighlightCodeCarbonTheme.DRACULA"
    }
  }; }
  static get states() { return {
    "themeStyle": {},
    "languagesToLoad": {},
    "loaded": {}
  }; }
  static get events() { return [{
      "method": "prismLanguageLoaded",
      "name": "prismLanguageLoaded",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      }
    }, {
      "method": "codeDidChange",
      "name": "codeDidChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "HTMLElement",
        "resolved": "HTMLElement",
        "references": {
          "HTMLElement": {
            "location": "global"
          }
        }
      }
    }]; }
  static get methods() { return {
    "load": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "findNextAnchor": {
      "complexType": {
        "signature": "(enter: boolean) => Promise<DeckdeckgoHighlightCodeAnchor>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "DeckdeckgoHighlightCodeAnchor": {
            "location": "import",
            "path": "../../declarations/deckdeckgo-highlight-code-anchor"
          },
          "NodeListOf": {
            "location": "global"
          },
          "HTMLElement": {
            "location": "global"
          }
        },
        "return": "Promise<DeckdeckgoHighlightCodeAnchor>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "zoomCode": {
      "complexType": {
        "signature": "(zoom: boolean) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLElement": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "theme",
      "methodName": "loadTheme"
    }, {
      "propName": "language",
      "methodName": "onLanguage"
    }, {
      "propName": "lineNumbers",
      "methodName": "onLineNumbersChange"
    }, {
      "propName": "terminal",
      "methodName": "onCarbonChange"
    }]; }
  static get listeners() { return [{
      "name": "prismLanguageLoaded",
      "method": "languageLoaded",
      "target": "document",
      "capture": false,
      "passive": false
    }]; }
}
