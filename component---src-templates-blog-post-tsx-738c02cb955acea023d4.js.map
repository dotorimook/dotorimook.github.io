{"version":3,"sources":["webpack:///./src/components/seo.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["SEO","props","lang","meta","keywords","description","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","title","titleTemplate","content","name","property","author","concat","length","join","Divider","styled","p","styledScale","rhythm","hr","PostNavigator","ul","Frame","article","BlogPostTemplate","data","post","markdownRemark","excerpt","frontmatter","html","siteTitle","pageContext","previous","next","location","className","date","async","src","class","style","data-ad-layout","data-ad-format","data-ad-client","data-ad-slot","dangerouslySetInnerHTML","__html","to","fields","slug","rel"],"mappings":"2FAAA,4FAwBaA,EAAM,SAACC,GAClB,IAAMC,EAAOD,EAAMC,MAAQ,KACrBC,EAAOF,EAAME,MAAQ,GACrBC,EAAWH,EAAMG,UAAY,GAC7BC,EAAcJ,EAAMI,aAAe,GAEjCC,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBH,GAAeC,EAAKG,aAAaJ,YAEzD,OACE,kBAAC,IAAD,CACEK,eAAgB,CACdR,QAEFS,MAAOV,EAAMU,MACbC,cAAa,QAAUN,EAAKG,aAAaE,MACzCR,KAAM,CACJ,CACEU,QAASL,EACTM,KAAM,eAER,CACED,QAASZ,EAAMU,MACfI,SAAU,YAEZ,CACEF,QAASL,EACTO,SAAU,kBAEZ,CACEF,QAAS,UACTE,SAAU,WAEZ,CACEF,QAAS,UACTC,KAAM,gBAER,CACED,QAASP,EAAKG,aAAaO,OAC3BF,KAAM,mBAER,CACED,QAASZ,EAAMU,MACfG,KAAM,iBAER,CACED,QAASL,EACTM,KAAM,wBAGPG,OACCb,EAASc,OAAS,EACd,CACEL,QAAST,EAASe,KAAT,MACTL,KAAM,YAER,IAELG,OAAOd,O,kCC/FhB,iHAuBMiB,GAPOC,IAAOC,EAAV,sEAAGD,CAAH,wDAENE,aAAY,IACGC,YAAO,GACVA,aAAQ,IAGRH,IAAOI,GAAV,yEAAGJ,CAAH,uBACMG,YAAO,KAGpBE,EAAgBL,IAAOM,GAAV,+EAAGN,CAAH,0FAQbO,EAAQP,IAAOQ,QAAV,uEAAGR,CAAH,gDAgEIS,UAzDU,SAAC7B,GACxB,IAAM8B,EAAO9B,EAAM8B,KACbC,EAAOD,EAAKE,eACZC,EAAUF,EAAKE,QACfC,EAAcH,EAAKG,YACnBC,EAAOJ,EAAKI,KACZC,EAAYN,EAAKzB,KAAMG,aAAcE,MANF,EAOdV,EAAMqC,YAAzBC,EAPiC,EAOjCA,SAAUC,EAPuB,EAOvBA,KAElB,OACE,kBAAC,IAAD,CAAQC,SAAUxC,EAAMwC,SAAU9B,MAAO0B,GACvC,kBAAC,IAAD,CACE1B,MAAOwB,EAAYxB,MACnBN,YAAa8B,EAAY9B,aAAe6B,IAE1C,6BAASQ,UAAU,2BACjB,kBAACd,EAAD,KACE,4BAAKI,EAAKG,YAAaxB,OACvB,yBAAK+B,UAAU,QAAQP,EAAYQ,MACnC,kBAAC,IAAD,KACE,4BAAQC,OAAK,EAACC,IAAI,oEAEpB,yBAAKC,MAAM,cACPC,MAAM,oCACNC,iBAAe,aACfC,iBAAe,QACfC,iBAAe,0BACfC,eAAa,eACjB,kBAAC,IAAD,KACE,wFAIF,yBAAKC,wBAAyB,CAAEC,OAAQjB,KACxC,kBAAChB,EAAD,MACA,kBAACM,EAAD,KACE,4BACGa,GACC,kBAAC,OAAD,CAAMe,GAAIf,EAASgB,OAAQC,KAAOC,IAAI,QAAtC,KACKlB,EAASJ,YAAaxB,QAI/B,4BACG6B,GACC,kBAAC,OAAD,CAAMc,GAAId,EAAKe,OAAQC,KAAOC,IAAI,QAC/BjB,EAAKL,YAAaxB,MADrB","file":"component---src-templates-blog-post-tsx-738c02cb955acea023d4.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport React from \"react\"\nimport Helmet from \"react-helmet\"\n\ninterface Meta {\n  name: string\n  content: string\n}\n\ninterface Props {\n  title: string\n  lang?: string\n  meta?: Meta[]\n  keywords?: string[]\n  description?: string\n}\n\nexport const SEO = (props: Props) => {\n  const lang = props.lang || \"en\"\n  const meta = props.meta || []\n  const keywords = props.keywords || []\n  const description = props.description || \"\"\n\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={props.title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          content: metaDescription,\n          name: `description`,\n        },\n        {\n          content: props.title,\n          property: `og:title`,\n        },\n        {\n          content: metaDescription,\n          property: `og:description`,\n        },\n        {\n          content: `website`,\n          property: `og:type`,\n        },\n        {\n          content: `summary`,\n          name: `twitter:card`,\n        },\n        {\n          content: site.siteMetadata.author,\n          name: `twitter:creator`,\n        },\n        {\n          content: props.title,\n          name: `twitter:title`,\n        },\n        {\n          content: metaDescription,\n          name: `twitter:description`,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                content: keywords.join(`, `),\n                name: `keywords`,\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n","import { graphql, Link, PageRendererProps } from \"gatsby\"\nimport React from \"react\"\nimport Helmet from \"react-helmet\"\nimport styled from \"styled-components\"\nimport { Bio } from \"../components/bio\"\nimport { Layout } from \"../components/layout\"\nimport { FadeLink } from \"../components/link\"\nimport { SEO } from \"../components/seo\"\nimport { Query, SitePageContext } from \"../graphql-types\"\nimport { rhythm, styledScale } from \"../utils/typography\"\n\ninterface Props extends PageRendererProps {\n  pageContext: SitePageContext\n  data: Query\n}\n\nconst Date = styled.p`\n  display: block;\n  ${styledScale(-1 / 5)};\n  margin-bottom: ${rhythm(1)};\n  margin-top: ${rhythm(-1)};\n`\n\nconst Divider = styled.hr`\n  margin-bottom: ${rhythm(1)};\n`\n\nconst PostNavigator = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style: none;\n  padding: 0;\n`\n\nconst Frame = styled.article`\n  .date {\n    font-size:.8rem;\n    margin-bottom:1rem;\n  }\n`;\n\nconst BlogPostTemplate = (props: Props) => {\n  const data = props.data!\n  const post = data.markdownRemark!\n  const excerpt = post.excerpt!\n  const frontmatter = post.frontmatter!\n  const html = post.html!\n  const siteTitle = data.site!.siteMetadata!.title!\n  const { previous, next } = props.pageContext\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO\n        title={frontmatter.title!}\n        description={frontmatter.description || excerpt}\n      />\n      <section className='frame-posts frame-inner'>\n        <Frame>\n          <h1>{post.frontmatter!.title}</h1>\n          <div className='date'>{frontmatter.date}</div>\n          <Helmet>\n            <script async src=\"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\"></script>\n          </Helmet>\n          <ins class=\"adsbygoogle\"\n              style=\"display:block; text-align:center;\"\n              data-ad-layout=\"in-article\"\n              data-ad-format=\"fluid\"\n              data-ad-client=\"ca-pub-5013570089563608\"\n              data-ad-slot=\"5476601469\"></ins>\n          <Helmet>\n            <script>\n                (adsbygoogle = window.adsbygoogle || []).push({});\n            </script>\n          </Helmet>\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n          <Divider />\n          <PostNavigator>\n            <li>\n              {previous && (\n                <Link to={previous.fields!.slug!} rel=\"prev\">\n                  ← {previous.frontmatter!.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={next.fields!.slug!} rel=\"next\">\n                  {next.frontmatter!.title} →\n                </Link>\n              )}\n            </li>\n          </PostNavigator>\n        </Frame>\n      </section>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}